以下に、YouTubeの自動字幕・手動字幕を活用し、そこからテキスト解析を行ってレポートを作成するシステムの要件定義をまとめます。いかのプロダクトを開発して

---

# AI面接官システム 要件定義書

本ドキュメントは、エンジニア採用における「候補者の面接動画（YouTube上）から取得した字幕テキストを解析し、レポートを生成するシステム」についてまとめた要件定義書です。スケジュールやコストに関する内容は含まず、機能およびレポート仕様にフォーカスしています。

---

## 1. システム概要

### 1.1 背景・目的

- 面接動画のテキスト（YouTubeの自動字幕や手動字幕）を取得・解析し、効率的に内容を把握できるレポートを採用担当者に提供したい。  
- 質問・回答の切り分けは不要だが、テキスト全体を要約したり、要点を抽出するなどして、意思決定のサポートを行う。  
- Streamlit を用いたアプリケーションでシンプルに実装し、初期デプロイは Streamlit Cloud で行う。

### 1.2 処理フロー（概略）

1. ユーザーがYouTube動画のURLを入力（Streamlit上）  
2. YouTube Data API / Captions API により、字幕（自動 or 手動）をテキストとして取得  
3. 取得したテキストを LLM等のNLP処理 にかけ、要約・キーフレーズ抽出・簡易的な感情分析等を実施  
4. レポートとして可視化・出力し、採用担当者が確認できるようにする

---

## 2. 機能要件

### 2.1 字幕取得

1. YouTube Data API / Captions API 連携  
   - 動画に付与されている字幕（自動生成・手動アップロード）をテキスト形式で取得する。  
   - 自動字幕は動画オーナー権限が必要となる場合が多いため、その前提を周知する。  
   - API連携にはOAuth 2.0やAPIキーなどを利用し、安全に認証・認可を行う。

2. テキスト整形  
   - タイムスタンプが付属している場合、それを保持しておくか、事前に除去して全文テキスト化するかを選択可能。  
   - 必要に応じて改行、句読点挿入などの前処理を行う。

3. エラー対応  
   - 字幕が存在しない場合、ユーザーへ適切なメッセージを表示（「字幕がないため解析できません」等）。

### 2.2 NLP処理

1. 要約機能  
   - 取得した字幕テキストをコンパクトにまとめる要約機能を実装。  
   - LLM（ GeminiAPI） を活用し、複数の要約手法（箇条書き形式、短文サマリーなど）をオプションとして提供してもよい。

2. キーフレーズ抽出  
   - テキストの中でも特に重要な単語やフレーズを抽出する機能。  
   - エンジニア採用であれば、技術用語（フレームワーク名、言語名、プロジェクト名など）を見つけやすくするロジックを用意。

3. 簡易的なセンチメント分析  
   - テキスト全体がポジティブ/ネガティブ/ニュートラルのいずれの傾向が強いか推定（オプション）。  
   - 面接におけるニュアンスを掴む補助情報としての扱い。

4. トピック分類（オプション）  
   - テキストを複数のカテゴリ（例: 「技術スキル」「コミュニケーション」「キャリア志向」等）に自動分類し、どの領域を多く語っているか可視化。

---

## 3. レポート要件

本システムの最重要要素であるレポートについて、出力フォーマットや内容を詳細に定義します。

### 3.1 レポート形式

- Streamlit画面上でのWeb表示  
  - 解析結果をダッシュボード形式で可視化。  
- PDF/ドキュメント出力（将来的オプション）  
  - 採用担当者が社内共有しやすいよう、エクスポート機能を検討（初期リリースでは必須でなくても良い）。

### 3.2 レポートの項目例

レポートは以下の要素を含む構成とする。

1. 候補者情報 / 動画情報  
   - 動画タイトル、サムネイル、URL  
   - 字幕の有無、字幕の言語  
   - 動画長さ（参考用）

2. 原文テキスト（字幕）  
   - すべての字幕テキストを表示（スクロール可能なテキストエリア等）  
   - 長文になりすぎる場合は折りたたみ表示などを検討

3. 要約  
   - 1段階要約（短文サマリー）: 100〜200文字程度で要点を把握可能  
   - 2段階要約（詳細サマリー）: 箇条書きの要点リストや500文字前後の詳細説明

4. キーフレーズリスト  
   - 主要ワードや頻出技術用語・固有名詞をピックアップして並べる  
   - 重要度や出現回数も表示

5. センチメント/感情傾向（オプション）  
   - 全体のポジティブ/ネガティブ度合いを棒グラフやメーターで簡易表示  
   - あくまで参考情報として扱い、過度な断定は避ける

6. 追加コメント・インサイト（オプション）  
   - LLMによる「候補者の強み・懸念点」「質問の深堀りポイント」などの自動生成コメント  
   - 採用担当者が「どこをもう少し聞くべきか」を検討する材料

7. 総合評価（暫定）  
   - 自動スコアリングは本要件では必須ではないが、簡易的に★〜★★★★★などの指標を表示してもよい。

### 3.3 表示レイアウト（イメージ）

```
------------------------------------------------
[動画情報]
- タイトル/サムネイル/URL
- 長さ/字幕言語

[要約(短文/箇条書き)]
- 短文サマリー: 100文字程度
- 箇条書きの詳細サマリー

[キーフレーズ]
- リスト表示(重要度順/出現頻度順)

[全文テキスト表示]
- スクロール対応 or 折りたたみ

[センチメント分析結果(オプション)]
- ポジ/ネガ 比率グラフ

[追加コメント・インサイト(オプション)]
- LLMが推定した強み/懸念点
------------------------------------------------
```

- Streamlit でコンテナ単位のレイアウトを構成し、タブやアコーディオン形式を使うと見やすくなる。

### 3.4 可搬性・拡張性

- 将来的にはPDF出力やエクスポート機能をつける可能性があるため、レポート生成処理を一つのモジュールとして分離しておく。  
- 企業内での承認ワークフローや他システム連携（ATSなど）を想定する場合、レポートをJSON形式でも取得できるようにAPI設計を検討しておくと良い。

### 4.3 運用・拡張性

- 初期デプロイはStreamlit Cloud  
  - 手軽にデプロイ可能。アカウント管理やリポジトリ連携で都度アップデート。  

---

## 5. システム構成（イメージ）

```
┌────────────────────────┐
│      Streamlit (UI)         │
│ - ユーザーがYouTube URL入力  │
│ - レポートを表示             │
└────────────────────────┘
             │
             ▼
┌────────────────────────┐
│   YouTube Data API / Captions │
│ - 字幕テキストを取得           │
└────────────────────────┘
             │
         [字幕テキスト]
             ▼
┌────────────────────────┐
│       NLP/LLM解析          │
│ - 要約/キーフレーズ抽出等   │
└────────────────────────┘
             │
        [解析結果]
             ▼
┌────────────────────────┐
│   Streamlitでレポート生成   │
│ - 要約/キーフレーズ/原文表示 │
└────────────────────────┘
```

---

## 6. 使用技術一覧

- プログラミング言語  
  - Python 3.x  
- フレームワーク / ライブラリ  
  - Streamlit: UI構築・レポート表示  
  - google-api-python-client: YouTube Data API 連携  
  - LLMサービス (例: GeminiAPI): 要約、キーフレーズ抽出等  
  - spaCy / NLTK（オプション）: 補助的なNLP機能  
- 認証・認可  
  - OAuth 2.0: YouTube Data API呼び出し  
- ホスティング・運用  
  - 初期: Streamlit Cloud へデプロイ  

---

## まとめ

- 要件の要点  
  1. 字幕取得（YouTube Data API） を中心にテキストを取得し、音声認識自体は行わない。  
  2. 取得した字幕テキストを LLM等のNLP処理 で要約・キーフレーズ抽出・簡易感情分析。  
  3. レポート は採用担当者にとってわかりやすい形式を重視：  
     - 動画情報・全文表示・要約・キーフレーズ・任意でセンチメント等  
  4. シンプルUI（Streamlit） でPoC段階の運用を行いつつ、将来的にGCPへ拡張可能な構成。